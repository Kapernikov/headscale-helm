{{- if .Values.client.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "headscale.fullname" . }}-create-client-secret
  labels:
    {{- include "headscale.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: {{ include "headscale.fullname" . }}-client-job
      restartPolicy: OnFailure
      containers:
      - name: create-secret
        image: "bitnami/kubectl"
        command:
        - /bin/sh
        - -c
        - |
          set -x
          CLIENT_USER="headscale-system"
          SECRET_NAME="{{ include "headscale.fullname" . }}-client-authkey"
          HEADSCALE_POD=$(kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "headscale.name" . }} -o jsonpath='{.items[0].metadata.name}')

          # Wait for the pod to be running
          kubectl wait --for=condition=ready pod/$HEADSCALE_POD -n {{ .Release.Namespace }} --timeout=120s
          

          # Wait for headscale users list to return valid JSON
          HEADSCALE_USERS_OUTPUT=""
          for i in $(seq 1 10); do
            HEADSCALE_USERS_OUTPUT=$(kubectl exec -n {{ .Release.Namespace }} $HEADSCALE_POD -- headscale users list --output json)
            if [ "$HEADSCALE_USERS_OUTPUT" = "null" ] || echo "$HEADSCALE_USERS_OUTPUT" | jq -e . >/dev/null 2>&1; then
              echo "headscale users list returned valid JSON."
              break
            fi
            echo "Attempt $i: headscale users list did not return valid JSON, retrying in 5 seconds..."
          done

          if ! ([ "$HEADSCALE_USERS_OUTPUT" = "null" ] || echo "$HEADSCALE_USERS_OUTPUT" | jq -e . >/dev/null 2>&1); then
            echo "Error: headscale users list never returned valid JSON."
            exit 1
          fi

          # Get current users
          HEADSCALE_USERS_OUTPUT=$(kubectl exec -n {{ .Release.Namespace }} $HEADSCALE_POD -- headscale users list --output json)
          if [ "$HEADSCALE_USERS_OUTPUT" = "null" ]; then
            HEADSCALE_USERS_OUTPUT="[]" # Treat null as empty array
          fi

          # Check if user exists
          USER_EXISTS=$(echo "$HEADSCALE_USERS_OUTPUT" | jq -e '.[] | select(.name == "'"$CLIENT_USER"'")' >/dev/null 2>&1; echo $?)

          USER_ID=""
          echo "Before USER_EXISTS check"
          if [ "$USER_EXISTS" -ne 0 ]; then
            echo "User $CLIENT_USER does not exist. Creating..."
            echo "Attempting to create user and get ID..."
            USER_ID=$(kubectl exec -n {{ .Release.Namespace }} $HEADSCALE_POD -- headscale users create $CLIENT_USER --output json | jq -r .id)
            echo "USER_ID after creation: $USER_ID"
            echo "Created user $CLIENT_USER with ID: $USER_ID"
          else
            echo "User $CLIENT_USER already exists. Getting ID..."
            echo "Attempting to get user ID from existing list..."
            USER_ID=$(echo "$HEADSCALE_USERS_OUTPUT" | jq -r '.[] | select(.name == "'"$CLIENT_USER"'") | .id')
            echo "USER_ID from existing list: $USER_ID"
            echo "User $CLIENT_USER ID: $USER_ID"
          fi

          echo "Before USER_ID check"
          if [ -z "$USER_ID" ]; then
            echo "Error: Could not retrieve USER_ID for $CLIENT_USER."
            exit 1
          fi
          echo "After USER_ID check"

          # Create or update secret
          echo "Creating or updating secret $SECRET_NAME..."
          AUTH_KEY=$(kubectl exec -n {{ .Release.Namespace }} $HEADSCALE_POD -- headscale preauthkeys create -u $USER_ID --reusable --ephemeral -o json | jq -r .key)
                      kubectl create secret generic $SECRET_NAME -n {{ .Release.Namespace }} --from-literal=authkey=$AUTH_KEY --dry-run=client -o yaml | kubectl apply -f -
          kubectl rollout restart deployment {{ include "headscale.fullname" . }}-client -n {{ .Release.Namespace }}
{{- end }}