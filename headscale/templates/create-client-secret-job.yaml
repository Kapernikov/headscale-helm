{{- if .Values.client.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "headscale.fullname" . }}-create-client-secret
  labels:
    {{- include "headscale.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: {{ include "headscale.fullname" . }}-client-job
      restartPolicy: OnFailure
      containers:
      - name: create-secret
        image: "bitnami/kubectl"
        command:
        - /bin/sh
        - -c
        - |
          set -Eeuo pipefail
          trap 'echo "[ERROR] Script failed at line $LINENO" >&2' ERR

          NAMESPACE="{{ .Release.Namespace }}"
          APP_NAME="{{ include "headscale.name" . }}"
          FULLNAME="{{ include "headscale.fullname" . }}"

          CLIENT_USER=${CLIENT_USER:-headscale-system}
          SECRET_NAME=${SECRET_NAME:-"$FULLNAME-client-authkey"}

          echo "[INFO] Waiting for deployment/$FULLNAME to be ready..."
          kubectl rollout status deployment "$FULLNAME" -n "$NAMESPACE" --timeout=180s

          echo "[INFO] Locating a running headscale pod..."
          # Prefer a Running pod
          HEADSCALE_POD=$(kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/name="$APP_NAME" -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | awk 'NR==1')
          if [ -z "${HEADSCALE_POD:-}" ]; then
            # Fallback: pick the first pod and wait for it to be ready
            HEADSCALE_POD=$(kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/name="$APP_NAME" -o jsonpath='{.items[0].metadata.name}')
            [ -n "$HEADSCALE_POD" ] || { echo "[ERROR] Could not find any headscale pod"; exit 1; }
            kubectl wait --for=condition=ready "pod/$HEADSCALE_POD" -n "$NAMESPACE" --timeout=120s
          fi
          echo "[INFO] Using pod: $HEADSCALE_POD"

          echo "[INFO] Ensuring user '$CLIENT_USER' exists..."
          # Try to create the user; ignore if it already exists
          kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale users create "$CLIENT_USER" >/dev/null 2>&1 || true
          # Verify existence
          if ! kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale users list --output json 2>/dev/null | tr -d '\n' | grep -q '"name"\s*:\s*"'"$CLIENT_USER"'"'; then
            echo "[ERROR] User '$CLIENT_USER' does not exist after creation attempt."
            exit 1
          fi

          echo "[INFO] Creating preauth key for user '$CLIENT_USER'..."
          AUTH_KEY=""
          for i in 1 2 3 4 5; do
            PAK_OUT=$(kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale preauthkeys create -u "$CLIENT_USER" --reusable --ephemeral -o json 2>&1 || true)
            AUTH_KEY=$(echo "$PAK_OUT" | sed -n 's/.*\(tskey-[A-Za-z0-9_.-]*\).*/\1/p' | awk 'NR==1')
            if [ -n "${AUTH_KEY:-}" ]; then
              break
            fi
            echo "[WARN] Could not obtain preauth key (attempt $i). Retrying in 3s..."
            sleep 3
          done
          if [ -z "${AUTH_KEY:-}" ]; then
            echo "[ERROR] Failed to extract preauth key after multiple attempts. Last output:" >&2
            echo "$PAK_OUT" >&2
            exit 1
          fi
          echo "[INFO] Got preauth key (redacted)"

          echo "[INFO] Creating or updating secret '$SECRET_NAME'..."
          kubectl create secret generic "$SECRET_NAME" -n "$NAMESPACE" \
            --from-literal=authkey="$AUTH_KEY" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "[INFO] Attempting to restart client deployment (if present)..."
          if kubectl get deployment "$FULLNAME-client" -n "$NAMESPACE" >/dev/null 2>&1; then
            kubectl rollout restart deployment "$FULLNAME-client" -n "$NAMESPACE"
          else
            echo "[INFO] Client deployment not found; skipping restart."
          fi
{{- end }}
