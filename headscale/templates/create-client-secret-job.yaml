{{- if .Values.client.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "headscale.fullname" . }}-create-client-secret
  labels:
    {{- include "headscale.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 10
  activeDeadlineSeconds: 600
  template:
    spec:
      serviceAccountName: {{ include "headscale.fullname" . }}-client-job
      restartPolicy: OnFailure
      containers:
      - name: create-secret
        image: "{{ .Values.client.job.image.repository }}:{{ .Values.client.job.image.tag }}"
        imagePullPolicy: {{ .Values.client.job.image.pullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          # Use POSIX-safe options; avoid bash-only flags
          set -eu
          # Try to make jq available when using an Alpine-based image
          (command -v jq >/dev/null 2>&1) || (apk add --no-cache jq >/dev/null 2>&1 || true)

          NAMESPACE="{{ .Release.Namespace }}"
          APP_NAME="{{ include "headscale.name" . }}"
          FULLNAME="{{ include "headscale.fullname" . }}"
          RELEASE_NAME="{{ .Release.Name }}"
          LABEL_SELECTOR="app.kubernetes.io/component=server,app.kubernetes.io/instance=$RELEASE_NAME"

          CLIENT_USER=${CLIENT_USER:-headscale-system}
          SECRET_NAME=${SECRET_NAME:-"$FULLNAME-client-authkey"}

          echo "[INFO] Locating a ready headscale pod (timeout ~5m)..."
          HEADSCALE_POD=""
          for i in $(seq 1 60); do
            CANDIDATE=$(kubectl get pods -n "$NAMESPACE" -l "$LABEL_SELECTOR" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | head -n 1)
            if [ -n "$CANDIDATE" ]; then
              if kubectl wait --for=condition=ready "pod/$CANDIDATE" -n "$NAMESPACE" --timeout=5s >/dev/null 2>&1; then
                HEADSCALE_POD="$CANDIDATE"
                break
              fi
            fi
            echo "[INFO] Waiting for a ready pod... ($i/60)"
            sleep 5
          done
          if [ -z "${HEADSCALE_POD:-}" ]; then
            echo "[ERROR] No ready headscale pod found within timeout."
            kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/name="$APP_NAME" -o wide || true
            exit 1
          fi
          echo "[INFO] Using pod: $HEADSCALE_POD"

          echo "[INFO] Ensuring user '$CLIENT_USER' exists and obtaining ID..."
          USER_ID=""
          # Attempt to read existing users and extract ID via jq when available
          USERS_JSON=$(kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale users list --output json 2>/dev/null || true)
          if command -v jq >/dev/null 2>&1; then
            USER_ID=$(printf "%s" "$USERS_JSON" | jq -r '.[] | select(.name=="'"$CLIENT_USER"'") | .id' | head -n1)
          else
            USERS_ONE=$(printf "%s" "$USERS_JSON" | tr -d '\n')
            USER_ID=$(printf "%s" "$USERS_ONE" | sed -n 's/.*"name":"'"$CLIENT_USER"'"[^}]*"id":\([0-9][0-9]*\).*/\1/p' | head -n 1)
            if [ -z "$USER_ID" ]; then
              USER_ID=$(printf "%s" "$USERS_ONE" | sed -n 's/.*"id":\([0-9][0-9]*\)[^}]*"name":"'"$CLIENT_USER"'".*/\1/p' | head -n 1)
            fi
          fi
          # If not found, try to create and parse ID from output
          if [ -z "$USER_ID" ]; then
            CREATE_OUT=$(kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale users create "$CLIENT_USER" --output json 2>&1 || true)
            if command -v jq >/dev/null 2>&1; then
              USER_ID=$(printf "%s" "$CREATE_OUT" | jq -r '.id // empty' | head -n1)
            else
              USER_ID=$(printf "%s" "$CREATE_OUT" | sed -n 's/.*"id":\([0-9][0-9]*\).*/\1/p' | head -n 1)
            fi
          fi
          # Final attempt: refresh list and re-extract
          if [ -z "$USER_ID" ]; then
            USERS_JSON=$(kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale users list --output json 2>/dev/null || true)
            if command -v jq >/dev/null 2>&1; then
              USER_ID=$(printf "%s" "$USERS_JSON" | jq -r '.[] | select(.name=="'"$CLIENT_USER"'") | .id' | head -n1)
            else
              USERS_ONE=$(printf "%s" "$USERS_JSON" | tr -d '\n')
              USER_ID=$(printf "%s" "$USERS_ONE" | sed -n 's/.*"name":"'"$CLIENT_USER"'"[^}]*"id":\([0-9][0-9]*\).*/\1/p' | head -n 1)
              if [ -z "$USER_ID" ]; then
                USER_ID=$(printf "%s" "$USERS_ONE" | sed -n 's/.*"id":\([0-9][0-9]*\)[^}]*"name":"'"$CLIENT_USER"'".*/\1/p' | head -n 1)
              fi
            fi
          fi
          if [ -z "$USER_ID" ]; then
            echo "[ERROR] Could not determine user ID for '$CLIENT_USER'"
            echo "Users list: $USERS_JSON"
            exit 1
          fi
          echo "[INFO] Using USER_ID=$USER_ID for '$CLIENT_USER'"

          echo "[INFO] Creating preauth key for user '$CLIENT_USER' (id=$USER_ID)..."
          AUTH_KEY=""
          for i in 1 2 3 4 5; do
            PAK_OUT=$(kubectl exec -n "$NAMESPACE" "$HEADSCALE_POD" -- headscale preauthkeys create -u "$USER_ID" --reusable --ephemeral -o json 2>&1 || true)
            if command -v jq >/dev/null 2>&1; then
              AUTH_KEY=$(printf "%s" "$PAK_OUT" | jq -r '.key // empty' | head -n1)
            else
              AUTH_KEY=$(echo "$PAK_OUT" | sed -n 's/.*\(tskey-[A-Za-z0-9_.-]*\).*/\1/p' | awk 'NR==1')
            fi
            if [ -n "${AUTH_KEY:-}" ]; then
              break
            fi
            echo "[WARN] Could not obtain preauth key (attempt $i). Retrying in 3s..."
            sleep 3
          done
          if [ -z "${AUTH_KEY:-}" ]; then
            echo "[ERROR] Failed to extract preauth key after multiple attempts. Last output:" >&2
            echo "$PAK_OUT" >&2
            exit 1
          fi
          echo "[INFO] Got preauth key (redacted)"

          echo "[INFO] Creating or updating secret '$SECRET_NAME'..."
          kubectl create secret generic "$SECRET_NAME" -n "$NAMESPACE" \
            --from-literal=authkey="$AUTH_KEY" \
            --dry-run=client -o yaml | kubectl apply -f - || { echo "[ERROR] Failed to create/apply secret '$SECRET_NAME'" >&2; exit 1; }

          echo "[INFO] Attempting to restart client deployment (if present)..."
          if kubectl get deployment "$FULLNAME-client" -n "$NAMESPACE" >/dev/null 2>&1; then
            kubectl rollout restart deployment "$FULLNAME-client" -n "$NAMESPACE"
          else
            echo "[INFO] Client deployment not found; skipping restart."
          fi
{{- end }}
